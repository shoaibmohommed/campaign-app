{"version":3,"sources":["Util.js","components/SearchBar.js","components/CampaignTable.js","App.js","index.js"],"names":["Util","DATE_FORMAT","HTML_DATE_FIELD_FORMAT","SearchBar","onFilterApply","useState","startDate","setStartDate","endDate","setEndDate","campaignName","eventsObj","setCampaignName","onChange","event","target","name","value","className","htmlFor","type","id","placeholder","onClick","_","isEmpty","moment","toast","error","position","POSITION","TOP_LEFT","TableHeader","columns","map","column","key","replace","str","toUpperCase","dateValidityRenderer","row","renderers","isActive","text","Budget","CampaignTable","campaignTableData","Object","keys","campaign","field","App","props","filteredData","state","originalTableData","filter","item","itemStartDate","itemEndDate","filterStartDate","filterEndDate","isBetween","toLocaleLowerCase","indexOf","setState","window","AddCampaigns","newData","data","valueArr","concat","Set","console","log","this","hasData","length","currentDate","React","Component","configure","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b689f86.chunk.js","sourcesContent":["import moment from 'moment';\r\nconst Util = {\r\n    DATE_FORMAT: \"MM/DD/YYYY\",\r\n    HTML_DATE_FIELD_FORMAT: \"YYYY-MM-DD\"\r\n};\r\n\r\n// function to check if the campaign is still active \r\n// or not according to the given logic.\r\nexport const isActive = function (campaign) {\r\n    const currentDate = moment();\r\n\r\n    const startDate = moment(campaign.startDate, Util.DATE_FORMAT);\r\n    const endDate = moment(campaign.endDate, Util.DATE_FORMAT);\r\n\r\n    if (currentDate.isBetween(startDate, endDate)) {\r\n        return true\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default Util;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport _ from 'lodash';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport Util from '../Util';\r\n\r\nconst { HTML_DATE_FIELD_FORMAT } = Util;\r\n\r\nconst SearchBar = ({ onFilterApply }) => {\r\n\r\n    // using useState hook from react for implementing state in functional component\r\n    const [startDate, setStartDate] = useState(\"\");\r\n    const [endDate, setEndDate] = useState(\"\");\r\n    const [campaignName, setCampaignName] = useState(\"\");\r\n\r\n    const eventsObj = { setStartDate, setEndDate, setCampaignName };\r\n    const onChange = (event) => {\r\n        const { name, value } = event.target;\r\n        eventsObj[name](value);\r\n    };\r\n\r\n    const onSearchBtnClick = () => {\r\n        if ((!_.isEmpty(startDate) || !_.isEmpty(endDate)) && (_.isEmpty(startDate) || _.isEmpty(endDate))) {\r\n            toast.error(\"Either select both the start date and end date or do not select any of it.\", {\r\n                position: toast.POSITION.TOP_LEFT\r\n            });\r\n            return;\r\n        }\r\n        else if (moment(startDate, HTML_DATE_FIELD_FORMAT) > moment(endDate, HTML_DATE_FIELD_FORMAT)) {\r\n            toast.error(\"start date can not be greater than the end date \", {\r\n                position: toast.POSITION.TOP_LEFT\r\n            });\r\n            return;\r\n        }\r\n\r\n        onFilterApply({ ...{ startDate, endDate, campaignName } })\r\n    }\r\n\r\n    return <div className=\"searchBar\">\r\n        <div>\r\n            <div className=\"field-group text-left\">\r\n                <label htmlFor=\"start\">Start date:</label>\r\n                <input type=\"date\"\r\n                    id=\"start\"\r\n                    name=\"setStartDate\"\r\n                    value={startDate}\r\n                    onChange={onChange} />\r\n            </div>\r\n            <div className=\"field-group text-left\">\r\n                <label htmlFor=\"end\">End date:</label>\r\n                <input type=\"date\"\r\n                    id=\"end\"\r\n                    name=\"setEndDate\"\r\n                    value={endDate}\r\n                    onChange={onChange} />\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <input type=\"text\"\r\n                name=\"setCampaignName\"\r\n                value={campaignName}\r\n                placeholder=\"Search By Name\"\r\n                onChange={onChange} />\r\n            <button className=\"searchBtn\" onClick={onSearchBtnClick}><i className=\"fa fa-search\"></i></button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nSearchBar.propTypes = {\r\n    onFilterApply: PropTypes.func\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport moment from 'moment';\r\nimport Util from '../Util';\r\nconst { DATE_FORMAT } = Util;\r\nconst getFormatedString = str =>// insert a space before all caps\r\n    str.replace(/([A-Z])/g, ' $1')\r\n        // uppercase the first character\r\n        .replace(/^./, function (str) { return str.toUpperCase(); });\r\n\r\nconst TableHeader = ({ columns }) => (\r\n    <thead>\r\n        <tr>\r\n            {columns.map((column, key) => <th key={key}>{getFormatedString(column)}</th>)}\r\n        </tr>\r\n    </thead>\r\n);\r\n\r\nconst dateValidityRenderer = function (row, value) {\r\n    let itemStartDate = moment(row.startDate, DATE_FORMAT);\r\n    let itemEndDate = moment(row.endDate, DATE_FORMAT);\r\n    if (itemStartDate > itemEndDate) {\r\n        return <span className=\"color-red\">{value}</span>;\r\n    }\r\n    return value;\r\n}\r\n\r\n// Rederers to be used so return some custom html on selected columns;\r\nconst renderers = {\r\n    isActive: function (row, value) {\r\n        let text = \"Active\";\r\n        if (!value) {\r\n            text = \"InActive\";\r\n\r\n        }\r\n        return <span><i className={`fa fa-circle ${text}`}></i> {text}</span>;\r\n    },\r\n    Budget: function (row, value) {\r\n        return `${value} USD`;\r\n    },\r\n    startDate: dateValidityRenderer,\r\n    endDate: dateValidityRenderer\r\n};\r\n\r\n// functional component to render a table for all the campaigns\r\nconst CampaignTable = ({ campaignTableData }) => {\r\n    const columns = Object.keys(campaignTableData[0]);\r\n    return <table>\r\n        <TableHeader columns={columns} />\r\n        <tbody>\r\n            {\r\n                campaignTableData.map(campaign =>\r\n                    <tr key={campaign.id}>\r\n                        {columns.map((field, key) =>\r\n                            <td key={key}>\r\n                                {(renderers[field] && renderers[field](campaign, campaign[field])) || campaign[field]}\r\n                            </td>)}\r\n                    </tr>\r\n                )\r\n            }\r\n        </tbody>\r\n    </table>\r\n};\r\n\r\nexport default CampaignTable;\r\n","import React from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport moment from 'moment';\nimport CampaignTable from './components/CampaignTable';\nimport _ from 'lodash';\nimport Util, { isActive } from './Util';\n\nconst { DATE_FORMAT, HTML_DATE_FIELD_FORMAT } = Util;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      campaignTableData: [],\n      originalTableData: [],\n      startDate: '',\n      endDate: '',\n      campaignName: ''\n    }\n\n    // global method exposed for adding campaign data\n    window.AddCampaigns = (newData) => {\n      const { startDate, endDate, campaignName, originalTableData } = this.state;\n      let data = [...originalTableData];\n      data = data.concat(newData);\n\n      let valueArr = data.map(item => item.id);\n      let uniqueValue = [...new Set(valueArr)];\n\n      let hasDuplicates = valueArr > uniqueValue;\n      if (hasDuplicates) {\n        console.log(\"Please check the data provided it must have unique id values\");\n        return false;\n      }\n      this.setState({ originalTableData: data }, () => {\n        this.onFilterApply({ startDate, endDate, campaignName });\n      });\n      return true;\n\n    }\n  }\n\n\n  onFilterApply = ({ startDate, endDate, campaignName }) => {\n\n    let filteredData = [...this.state.originalTableData];\n\n\n    // show record if campaign start date or end date is in filter range\n    if (!_.isEmpty(startDate) && !_.isEmpty(endDate)) {\n      filteredData = filteredData.filter(item => {\n        let itemStartDate = moment(item.startDate, DATE_FORMAT);\n        let itemEndDate = moment(item.endDate, DATE_FORMAT);\n        let filterStartDate = moment(startDate, HTML_DATE_FIELD_FORMAT);\n        let filterEndDate = moment(endDate, HTML_DATE_FIELD_FORMAT);\n\n        if (itemStartDate.isBetween(filterStartDate, filterEndDate)\n          || itemEndDate.isBetween(filterStartDate, filterEndDate)) {\n          return true\n        }\n        return false;\n      });\n    }\n\n    if (!_.isEmpty(campaignName)) {\n      filteredData = filteredData.filter(item =>\n        item.name.toLocaleLowerCase()\n          .indexOf(campaignName.toLocaleLowerCase()) > -1\n      )\n    }\n\n    this.setState({\n      campaignTableData: filteredData,\n      startDate,\n      endDate,\n      campaignName\n    });\n  };\n\n  render() {\n    let { campaignTableData } = this.state;\n    const hasData = campaignTableData.length > 0;\n\n    if (hasData) {\n      campaignTableData = campaignTableData.map(campaign => {\n        campaign.isActive = isActive(campaign);\n        return campaign;\n      });\n    }\n\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          <h1>Campaign App</h1>\n          <SearchBar onFilterApply={this.onFilterApply} />\n        </header>\n        <section className=\"container\">\n\n          {hasData && <CampaignTable campaignTableData={campaignTableData} />}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { toast } from 'react-toastify';\n // Call it once in your app. At the root of your app is the best place\n toast.configure()\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}