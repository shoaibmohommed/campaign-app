{"version":3,"sources":["components/SearchBar.js","Util.js","components/CampaignTable.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","onFilterApply","useState","startDate","setStartDate","endDate","setEndDate","campaignName","eventsObj","setCampaignName","onChange","event","target","name","value","className","htmlFor","type","id","placeholder","onClick","DATE_FORMAT","Util","TableHeader","columns","map","column","key","replace","str","toUpperCase","dateValidityRenderer","row","moment","renderers","isActive","text","Budget","CampaignTable","campaignTableData","Object","keys","campaign","field","HTML_DATE_FIELD_FORMAT","campaignData","App","props","filteredData","_","isEmpty","filter","item","itemStartDate","itemEndDate","isBetween","extraFilterRecords","concat","uniqBy","toLocaleLowerCase","indexOf","setState","state","window","AddCampaigns","newData","data","valueArr","Set","console","log","this","hasData","length","currentDate","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"whBAGA,IAmDeA,EAnDG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGHC,mBAAS,IAHN,mBAG9BC,EAH8B,KAGnBC,EAHmB,OAIPF,mBAAS,IAJF,mBAI9BG,EAJ8B,KAIrBC,EAJqB,OAKGJ,mBAAS,IALZ,mBAK9BK,EAL8B,KAO/BC,EAAY,CAAEJ,eAAcE,aAAYG,gBAPT,MAQ/BC,EAAW,SAACC,GAAW,IAAD,EACAA,EAAMC,OAAtBC,EADgB,EAChBA,KAAMC,EADU,EACVA,MACdN,EAAUK,GAAMC,IAOpB,OAAO,yBAAKC,UAAU,aAClB,6BACI,yBAAKA,UAAU,yBACX,2BAAOC,QAAQ,SAAf,eACA,2BAAOC,KAAK,OACRC,GAAG,QACHL,KAAK,eACLC,MAAOX,EACPO,SAAUA,KAElB,yBAAKK,UAAU,yBACX,2BAAOC,QAAQ,OAAf,aACA,2BAAOC,KAAK,OACRC,GAAG,MACHL,KAAK,aACLC,MAAOT,EACPK,SAAUA,MAGtB,6BACI,2BAAOO,KAAK,OACRJ,KAAK,kBACLC,MAAOP,EACPY,YAAY,iBACZT,SAAUA,IACd,4BAAQK,UAAU,YAAYK,QA7Bb,WACrBnB,E,qVAAc,CAAD,GAAM,CAAEE,YAAWE,UAASE,oBA4BoB,uBAAGQ,UAAU,qB,gBC7CnE,EACE,aADF,EAEa,aCCpBM,EAAgBC,EAMlBC,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAChB,+BACI,4BACKA,EAAQC,IAAI,SAACC,EAAQC,GAAT,OAAiB,wBAAIA,IAAKA,GAAwBD,EAPnEE,QAAQ,WAAY,OAEnBA,QAAQ,KAAM,SAAUC,GAAO,OAAOA,EAAIC,sBAU7CC,EAAuB,SAAUC,EAAKlB,GAGxC,OAFoBmB,IAAOD,EAAI7B,UAAWkB,GACxBY,IAAOD,EAAI3B,QAASgB,GAE3B,0BAAMN,UAAU,aAAaD,GAEjCA,GAILoB,EAAY,CACdC,SAAU,SAAUH,EAAKlB,GACrB,IAAIsB,EAAO,SAKX,OAJKtB,IACDsB,EAAO,YAGJ,8BAAM,uBAAGrB,UAAS,uBAAkBqB,KAApC,IAAkDA,IAE7DC,OAAQ,SAAUL,EAAKlB,GACnB,MAAM,GAAN,OAAUA,EAAV,SAEJX,UAAW4B,EACX1B,QAAS0B,GAuBEO,EAnBO,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,kBACff,GADsD,EAApBvB,cACxBuC,OAAOC,KAAKF,EAAkB,KAC9C,OAAO,+BACH,kBAAC,EAAD,CAAaf,QAASA,IACtB,+BAEQe,EAAkBd,IAAI,SAAAiB,GAAQ,OAC1B,wBAAIf,IAAKe,EAASxB,IACbM,EAAQC,IAAI,SAACkB,EAAOhB,GAAR,OACT,wBAAIA,IAAKA,GACHO,EAAUS,IAAUT,EAAUS,GAAOD,EAAUA,EAASC,KAAYD,EAASC,Y,gBC9CvGtB,EAAwCC,EAA3BsB,EAA2BtB,EAiBhD,IAAIuB,EAAe,GA6GJC,E,YAxGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KA4BR9C,cAAgB,YAA2C,IAAxCE,EAAuC,EAAvCA,UAAWE,EAA4B,EAA5BA,QAASE,EAAmB,EAAnBA,aAEjCyC,EAAY,YAAOH,GAgBvB,GAbKI,IAAEC,QAAQ/C,KACb6C,EAAeA,EAAaG,OAAO,SAAAC,GACjC,IAAIC,EAAgBpB,IAAOmB,EAAKjD,UAAWkB,GACvCiC,EAAcrB,IAAOmB,EAAK/C,QAASgB,GAEvC,QADsBY,IAAO9B,EAAWyC,GACpBW,UAAUF,EAAeC,OAQ5CL,IAAEC,QAAQ7C,GAAU,CACvB,IAAImD,EAAqBR,EAAaG,OAAO,SAAAC,GAC3C,IAAIC,EAAgBpB,IAAOmB,EAAKjD,UAAWkB,GACvCiC,EAAcrB,IAAOmB,EAAK/C,QAASgB,GAEvC,QADoBY,IAAO5B,EAASuC,GAClBW,UAAUF,EAAeC,KAO7CN,EAAaS,OAAOD,GACpBR,EAAeC,IAAES,OAAOV,EAAc,MAGnCC,IAAEC,QAAQ3C,KACbyC,EAAeA,EAAaG,OAAO,SAAAC,GAAI,OACrCA,EAAKvC,KAAK8C,oBACPC,QAAQrD,EAAaoD,sBAAwB,KAIpD,EAAKE,SAAS,CACZtB,kBAAmBS,EACnB7C,YACAE,UACAE,kBAxEF,EAAKuD,MAAQ,CACXvB,kBAAmB,GACnBpC,UAAW,GACXE,QAAS,GACTE,aAAc,IAIhBwD,OAAOC,aAAe,SAACC,GACrB,IAAIC,EAAI,YAAOrB,GADkB,EAEY,EAAKiB,MAA1C3D,EAFyB,EAEzBA,UAAWE,EAFc,EAEdA,QAASE,EAFK,EAELA,aAGxB4D,GAFJD,EAAOA,EAAKT,OAAOQ,IAECxC,IAAI,SAAA2B,GAAI,OAAIA,EAAKlC,KAGjBiD,EAFL,YAAO,IAAIC,IAAID,IAI5BE,QAAQC,IAAI,iEAGdzB,EAAeqB,EACf,EAAKjE,cAAc,CAAEE,YAAWE,UAASE,mBAxB1B,E,sEA8ET,IACFgC,EAAsBgC,KAAKT,MAA3BvB,kBACAiC,EAAUjC,EAAkBkC,OAAS,EAS3C,OAPID,IACFjC,EAAoBA,EAAkBd,IAAI,SAAAiB,GAExC,OADAA,EAASP,SArGjB,SAAkBO,GAChB,IAAMgC,EAAczC,MAEd9B,EAAY8B,IAAOS,EAASvC,UAAWkB,GACvChB,EAAU4B,IAAOS,EAASrC,QAASgB,GAEzC,QAAIqD,EAAYnB,UAAUpD,EAAWE,GA+FX8B,CAASO,GACtBA,KAKT,yBAAK3B,UAAU,OACb,4BAAQA,UAAU,cAChB,4CACA,kBAAC,EAAD,CAAWd,cAAesE,KAAKtE,iBAEjC,6BAASc,UAAU,aAEhByD,GAAW,kBAAC,EAAD,CAAejC,kBAAmBA,U,GAlGtCoC,IAAMC,WCjBJC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.40e97075.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SearchBar = ({ onFilterApply }) => {\r\n\r\n    // using useState hook from react for implementing state in functional component\r\n    const [startDate, setStartDate] = useState(\"\");\r\n    const [endDate, setEndDate] = useState(\"\");\r\n    const [campaignName, setCampaignName] = useState(\"\");\r\n\r\n    const eventsObj = { setStartDate, setEndDate, setCampaignName };\r\n    const onChange = (event) => {\r\n        const { name, value } = event.target;\r\n        eventsObj[name](value);\r\n    };\r\n\r\n    const onSearchBtnClick = () => {\r\n        onFilterApply({ ...{ startDate, endDate, campaignName } })\r\n    }\r\n\r\n    return <div className=\"searchBar\">\r\n        <div>\r\n            <div className=\"field-group text-left\">\r\n                <label htmlFor=\"start\">Start date:</label>\r\n                <input type=\"date\"\r\n                    id=\"start\"\r\n                    name=\"setStartDate\"\r\n                    value={startDate}\r\n                    onChange={onChange} />\r\n            </div>\r\n            <div className=\"field-group text-left\">\r\n                <label htmlFor=\"end\">End date:</label>\r\n                <input type=\"date\"\r\n                    id=\"end\"\r\n                    name=\"setEndDate\"\r\n                    value={endDate}\r\n                    onChange={onChange} />\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <input type=\"text\"\r\n                name=\"setCampaignName\"\r\n                value={campaignName}\r\n                placeholder=\"Search By Name\"\r\n                onChange={onChange} />\r\n            <button className=\"searchBtn\" onClick={onSearchBtnClick}><i className=\"fa fa-search\"></i></button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nSearchBar.propTypes = {\r\n    onFilterApply: PropTypes.func\r\n}\r\n\r\nexport default SearchBar;","export default {\r\n    DATE_FORMAT: \"MM/DD/YYYY\",\r\n    HTML_DATE_FIELD_FORMAT: \"YYYY-MM-DD\"\r\n};","import React from 'react';\r\nimport moment from 'moment';\r\nimport Util from '../Util';\r\nconst { DATE_FORMAT } = Util;\r\nconst getFormatedString = str =>// insert a space before all caps\r\n    str.replace(/([A-Z])/g, ' $1')\r\n        // uppercase the first character\r\n        .replace(/^./, function (str) { return str.toUpperCase(); });\r\n\r\nconst TableHeader = ({ columns }) => (\r\n    <thead>\r\n        <tr>\r\n            {columns.map((column, key) => <th key={key}>{getFormatedString(column)}</th>)}\r\n        </tr>\r\n    </thead>\r\n);\r\n\r\nconst dateValidityRenderer = function (row, value) {\r\n    let itemStartDate = moment(row.startDate, DATE_FORMAT);\r\n    let itemEndDate = moment(row.endDate, DATE_FORMAT);\r\n    if (itemStartDate > itemEndDate) {\r\n        return <span className=\"color-red\">{value}</span>;\r\n    }\r\n    return value;\r\n}\r\n\r\n// Rederers to be used so return some custom html on selected columns;\r\nconst renderers = {\r\n    isActive: function (row, value) {\r\n        let text = \"Active\";\r\n        if (!value) {\r\n            text = \"InActive\";\r\n\r\n        }\r\n        return <span><i className={`fa fa-circle ${text}`}></i> {text}</span>;\r\n    },\r\n    Budget: function (row, value) {\r\n        return `${value} USD`;\r\n    },\r\n    startDate: dateValidityRenderer,\r\n    endDate: dateValidityRenderer\r\n};\r\n\r\n// functional component to render a table for all the campaigns\r\nconst CampaignTable = ({ campaignTableData, onFilterApply }) => {\r\n    const columns = Object.keys(campaignTableData[0]);\r\n    return <table>\r\n        <TableHeader columns={columns} />\r\n        <tbody>\r\n            {\r\n                campaignTableData.map(campaign =>\r\n                    <tr key={campaign.id}>\r\n                        {columns.map((field, key) =>\r\n                            <td key={key}>\r\n                                {(renderers[field] && renderers[field](campaign, campaign[field])) || campaign[field]}\r\n                            </td>)}\r\n                    </tr>\r\n                )\r\n            }\r\n        </tbody>\r\n    </table>\r\n};\r\n\r\nexport default CampaignTable;\r\n","import React from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport moment from 'moment';\nimport CampaignTable from './components/CampaignTable';\nimport _ from 'lodash';\nimport Util from './Util';\n\nconst { DATE_FORMAT, HTML_DATE_FIELD_FORMAT } = Util;\n\n\n// function to check if the campaign is still active \n// or not according to the given logic.\nfunction isActive(campaign) {\n  const currentDate = moment();\n\n  const startDate = moment(campaign.startDate, DATE_FORMAT);\n  const endDate = moment(campaign.endDate, DATE_FORMAT);\n\n  if (currentDate.isBetween(startDate, endDate)) {\n    return true\n  }\n  return false;\n};\n\nlet campaignData = [\n\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      campaignTableData: [],\n      startDate: '',\n      endDate: '',\n      campaignName: ''\n    }\n\n    // global method exposed for adding campaign data\n    window.AddCampaigns = (newData) => {\n      let data = [...campaignData];\n      const { startDate, endDate, campaignName } = this.state;\n      data = data.concat(newData);\n\n      let valueArr = data.map(item => item.id);\n      let uniqueValue = [...new Set(valueArr)];\n\n      let hasDuplicates = valueArr > uniqueValue;\n      if (hasDuplicates) {\n        console.log(\"Please check the data provided it must have unique id values\");\n        return;\n      }\n      campaignData = data;\n      this.onFilterApply({ startDate, endDate, campaignName });\n    }\n  }\n\n\n  onFilterApply = ({ startDate, endDate, campaignName }) => {\n\n    let filteredData = [...campaignData];\n\n    // show record if startDate is in filter range\n    if (!_.isEmpty(startDate)) {\n      filteredData = filteredData.filter(item => {\n        let itemStartDate = moment(item.startDate, DATE_FORMAT);\n        let itemEndDate = moment(item.endDate, DATE_FORMAT);\n        let filterStartDate = moment(startDate, HTML_DATE_FIELD_FORMAT);\n        if (filterStartDate.isBetween(itemStartDate, itemEndDate)) {\n          return true\n        }\n        return false;\n      });\n    }\n\n    // show record if endDate is in filter range\n    if (!_.isEmpty(endDate)) {\n      let extraFilterRecords = filteredData.filter(item => {\n        let itemStartDate = moment(item.startDate, DATE_FORMAT);\n        let itemEndDate = moment(item.endDate, DATE_FORMAT);\n        let filterEndDate = moment(endDate, HTML_DATE_FIELD_FORMAT);\n        if (filterEndDate.isBetween(itemStartDate, itemEndDate)) {\n          return true\n        }\n        return false;\n      });\n\n      // merge data from startDate filter and endDate filter and removing duplicates\n      filteredData.concat(extraFilterRecords);\n      filteredData = _.uniqBy(filteredData, \"id\");\n    }\n\n    if (!_.isEmpty(campaignName)) {\n      filteredData = filteredData.filter(item =>\n        item.name.toLocaleLowerCase()\n          .indexOf(campaignName.toLocaleLowerCase()) > -1\n      )\n    }\n\n    this.setState({\n      campaignTableData: filteredData,\n      startDate,\n      endDate,\n      campaignName\n    });\n  };\n\n  render() {\n    let { campaignTableData } = this.state;\n    const hasData = campaignTableData.length > 0;\n\n    if (hasData) {\n      campaignTableData = campaignTableData.map(campaign => {\n        campaign.isActive = isActive(campaign);\n        return campaign;\n      });\n    }\n\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          <h1>Campaign App</h1>\n          <SearchBar onFilterApply={this.onFilterApply} />\n        </header>\n        <section className=\"container\">\n\n          {hasData && <CampaignTable campaignTableData={campaignTableData} />}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}