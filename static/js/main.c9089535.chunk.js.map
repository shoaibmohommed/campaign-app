{"version":3,"sources":["Util.js","components/SearchBar.js","components/CampaignTable.js","App.js","index.js"],"names":["Util","DATE_FORMAT","HTML_DATE_FIELD_FORMAT","SearchBar","onFilterApply","useState","startDate","setStartDate","endDate","setEndDate","campaignName","eventsObj","setCampaignName","onChange","event","target","name","value","className","htmlFor","type","id","placeholder","onClick","isEmpty","moment","toast","error","position","POSITION","TOP_LEFT","TableHeader","columns","map","column","key","replace","str","toUpperCase","dateValidityRenderer","row","renderers","isActive","text","Budget","processAndFilterData","campaignTableData","filteredData","campaign","currentDate","isBetween","filter","item","itemStartDate","itemEndDate","filterStartDate","filterEndDate","filterDataOnDate","toLocaleLowerCase","indexOf","filterDataOnCampaignName","CampaignTable","props","processedData","length","Object","keys","field","removeDuplicates","data","valueArr","Set","App","setState","state","window","AddCampaigns","newData","concat","uniqueValue","console","log","this","React","Component","configure","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9089535.chunk.js","sourcesContent":["import moment from 'moment';\r\nconst Util = {\r\n    DATE_FORMAT: \"MM/DD/YYYY\",\r\n    HTML_DATE_FIELD_FORMAT: \"YYYY-MM-DD\"\r\n};\r\n\r\n// function to check if the campaign is still active \r\n// or not according to the given logic.\r\nexport const isActive = function (campaign) {\r\n    const currentDate = moment();\r\n\r\n    const startDate = moment(campaign.startDate, Util.DATE_FORMAT);\r\n    const endDate = moment(campaign.endDate, Util.DATE_FORMAT);\r\n\r\n    if (currentDate.isBetween(startDate, endDate)) {\r\n        return true\r\n    }\r\n    return false;\r\n};\r\nexport const filterDataOnDate = function (filteredData, startDate, endDate) {\r\n    const { DATE_FORMAT, HTML_DATE_FIELD_FORMAT } = Util;\r\n    return filteredData.filter(item => {\r\n\r\n        let itemStartDate = moment(item.startDate, DATE_FORMAT);\r\n        let itemEndDate = moment(item.endDate, DATE_FORMAT);\r\n        let filterStartDate = moment(startDate, HTML_DATE_FIELD_FORMAT);\r\n        let filterEndDate = moment(endDate, HTML_DATE_FIELD_FORMAT);\r\n        if (itemStartDate.isBetween(filterStartDate, filterEndDate)\r\n            || itemEndDate.isBetween(filterStartDate, filterEndDate)) {\r\n            return true\r\n        }\r\n        return false;\r\n    });\r\n};\r\nexport const filterDataOnCampaignName = function (filteredData, campaignName) {\r\n    return filteredData.filter(item =>\r\n        item.name.toLocaleLowerCase()\r\n            .indexOf(campaignName.toLocaleLowerCase()) > -1\r\n    )\r\n};\r\n\r\nexport default Util;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport { isEmpty } from 'lodash';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport Util from '../Util';\r\n\r\nconst { HTML_DATE_FIELD_FORMAT } = Util;\r\n\r\nconst SearchBar = ({ onFilterApply }) => {\r\n\r\n    // using useState hook from react for implementing state in functional component\r\n    const [startDate, setStartDate] = useState(\"\");\r\n    const [endDate, setEndDate] = useState(\"\");\r\n    const [campaignName, setCampaignName] = useState(\"\");\r\n\r\n    const eventsObj = { setStartDate, setEndDate, setCampaignName };\r\n    const onChange = (event) => {\r\n        const { name, value } = event.target;\r\n        eventsObj[name](value);\r\n    };\r\n\r\n    const onSearchBtnClick = () => {\r\n        if ((!isEmpty(startDate) || !isEmpty(endDate)) && (isEmpty(startDate) || isEmpty(endDate))) {\r\n            toast.error(\"Either select both the start date and end date or do not select any of it.\", {\r\n                position: toast.POSITION.TOP_LEFT\r\n            });\r\n            return;\r\n        }\r\n        else if (moment(startDate, HTML_DATE_FIELD_FORMAT) > moment(endDate, HTML_DATE_FIELD_FORMAT)) {\r\n            toast.error(\"start date can not be greater than the end date \", {\r\n                position: toast.POSITION.TOP_LEFT\r\n            });\r\n            return;\r\n        }\r\n\r\n        onFilterApply({ startDate, endDate, campaignName });\r\n    }\r\n\r\n    return <div className=\"searchBar\">\r\n        <div>\r\n            <div className=\"field-group text-left\">\r\n                <label htmlFor=\"start\">Start date:</label>\r\n                <input type=\"date\"\r\n                    id=\"start\"\r\n                    name=\"setStartDate\"\r\n                    value={startDate}\r\n                    onChange={onChange} />\r\n            </div>\r\n            <div className=\"field-group text-left\">\r\n                <label htmlFor=\"end\">End date:</label>\r\n                <input type=\"date\"\r\n                    id=\"end\"\r\n                    name=\"setEndDate\"\r\n                    value={endDate}\r\n                    onChange={onChange} />\r\n            </div>\r\n            <input type=\"text\"\r\n                name=\"setCampaignName\"\r\n                value={campaignName}\r\n                placeholder=\"Search By Name\"\r\n                onChange={onChange} />\r\n        </div>\r\n        <button className=\"searchBtn\" onClick={onSearchBtnClick}><i className=\"fa fa-search\"></i> Search</button>\r\n    </div>\r\n}\r\n\r\nSearchBar.propTypes = {\r\n    onFilterApply: PropTypes.func\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport moment from 'moment';\r\nimport Util, { isActive } from '../Util';\r\nimport { isEmpty } from 'lodash';\r\nimport { filterDataOnDate, filterDataOnCampaignName } from '../Util';\r\n\r\nconst { DATE_FORMAT } = Util;\r\nconst getFormatedString = str =>// insert a space before all caps\r\n    str.replace(/([A-Z])/g, ' $1')\r\n        // uppercase the first character\r\n        .replace(/^./, function (str) { return str.toUpperCase(); });\r\n\r\nconst TableHeader = ({ columns }) => (\r\n    <thead>\r\n        <tr>\r\n            {columns.map((column, key) => <th key={key}>{getFormatedString(column)}</th>)}\r\n        </tr>\r\n    </thead>\r\n);\r\n\r\nconst dateValidityRenderer = function (row, value) {\r\n    let itemStartDate = moment(row.startDate, DATE_FORMAT);\r\n    let itemEndDate = moment(row.endDate, DATE_FORMAT);\r\n    if (itemStartDate > itemEndDate) {\r\n        return <span className=\"color-red\">{value}</span>;\r\n    }\r\n    return value;\r\n}\r\n\r\n// Rederers to be used so return some custom html on selected columns;\r\nconst renderers = {\r\n    isActive: function (row, value) {\r\n        let text = \"Active\";\r\n        if (!value) {\r\n            text = \"InActive\";\r\n\r\n        }\r\n        return <span><i className={`fa fa-circle ${text}`}></i> {text}</span>;\r\n    },\r\n    Budget: function (row, value) {\r\n        return `${value} USD`;\r\n    },\r\n    startDate: dateValidityRenderer,\r\n    endDate: dateValidityRenderer\r\n};\r\n\r\nconst processAndFilterData = ({ campaignTableData, startDate, endDate, campaignName }) => {\r\n    let filteredData = [...campaignTableData] || [];\r\n\r\n    // adding isActive Field\r\n    filteredData = filteredData.map(campaign => {\r\n        campaign.isActive = isActive(campaign);\r\n        return campaign;\r\n    });\r\n    \r\n    // show record if campaign start date or end date is in filter range\r\n    if (!isEmpty(startDate) && !isEmpty(endDate)) {\r\n        filteredData = filterDataOnDate(filteredData, startDate, endDate);\r\n    }\r\n    // filter the data on the basis of campaign name.\r\n    if (!isEmpty(campaignName)) {\r\n        filteredData = filterDataOnCampaignName(filteredData, campaignName);\r\n    }\r\n    return filteredData;\r\n};\r\n\r\n// functional component to render a table for all the campaigns\r\nconst CampaignTable = (props) => {\r\n    const processedData = processAndFilterData(props);\r\n\r\n    // show no data if array is empty\r\n    if (processedData.length === 0)\r\n        return <h1>No data found</h1>\r\n\r\n    const columns = Object.keys(processedData[0]);\r\n    return <table>\r\n        <TableHeader columns={columns} />\r\n        <tbody>\r\n            {\r\n                processedData.map(campaign =>\r\n                    <tr key={campaign.id}>\r\n                        {columns.map((field, key) =>\r\n                            <td key={key}>\r\n                                {(renderers[field] && renderers[field](campaign, campaign[field])) || campaign[field]}\r\n                            </td>)}\r\n                    </tr>\r\n                )\r\n            }\r\n        </tbody>\r\n    </table>\r\n};\r\n\r\nexport default CampaignTable;\r\n","import React from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport CampaignTable from './components/CampaignTable';\n\nconst removeDuplicates = (data) => {\n  let valueArr = data.map(item => item.id);\n  return [...new Set(valueArr)];\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      campaignTableData: [],\n      startDate: '',\n      endDate: '',\n      campaignName: ''\n    }\n\n    // global method exposed for adding campaign data\n    window.AddCampaigns = (newData) => {\n      const { startDate, endDate, campaignName, campaignTableData } = this.state;\n      let data = [...campaignTableData];\n      data = data.concat(newData);\n\n      let uniqueValue = removeDuplicates(data);\n\n      let hasDuplicates = data.length > uniqueValue.length;\n      if (hasDuplicates) {\n        console.log(\"Please check the data provided it must have unique id values\");\n        return false;\n      }\n\n      this.setState({ campaignTableData: data }, () => {\n        this.onFilterApply({ startDate, endDate, campaignName });\n      });\n      return true;\n\n    }\n  }\n\n\n  onFilterApply = ({ startDate, endDate, campaignName }) => {\n    this.setState({\n      startDate,\n      endDate,\n      campaignName\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          <h1>Campaign App</h1>\n          <SearchBar onFilterApply={this.onFilterApply} />\n        </header>\n        <section className=\"container\">\n\n          {<CampaignTable {...this.state} />}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { toast } from 'react-toastify';\n // Call it once in your app. At the root of your app is the best place\n toast.configure()\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}