{"version":3,"sources":["components/SearchBar.js","Util.js","components/CampaignTable.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","onFilterApply","useState","startDate","setStartDate","endDate","setEndDate","campaignName","eventsObj","setCampaignName","onChange","event","target","name","value","className","type","placeholder","onClick","DATE_FORMAT","Util","TableHeader","columns","map","column","key","replace","str","toUpperCase","dateValidityRenderer","row","moment","renderers","isActive","text","Budget","CampaignTable","campaignTableData","Object","keys","campaign","id","field","HTML_DATE_FIELD_FORMAT","campaignData","App","props","filteredData","_","isEmpty","filter","item","itemStartDate","itemEndDate","isBetween","extraFilterRecords","concat","uniqBy","toLocaleLowerCase","indexOf","setState","state","window","AddCampaigns","newData","data","valueArr","Set","console","log","this","hasData","length","currentDate","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b77ae36.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SearchBar = ({ onFilterApply }) => {\r\n\r\n    // using useState hook from react for implementing state in functional component\r\n    const [startDate, setStartDate] = useState(\"\");\r\n    const [endDate, setEndDate] = useState(\"\");\r\n    const [campaignName, setCampaignName] = useState(\"\");\r\n\r\n    const eventsObj = { setStartDate, setEndDate, setCampaignName };\r\n    const onChange = (event) => {\r\n        const { name, value } = event.target;\r\n        eventsObj[name](value);\r\n    };\r\n\r\n    const onSearchBtnClick = () => {\r\n        onFilterApply({ ...{ startDate, endDate, campaignName } })\r\n    }\r\n\r\n    return <div className=\"searchBar\">\r\n        <span>\r\n            <input type=\"date\"\r\n                name=\"setStartDate\"\r\n                value={startDate}\r\n                placeholder=\"Start Date\"\r\n                onChange={onChange} />\r\n            <input type=\"date\"\r\n                name=\"setEndDate\"\r\n                value={endDate}\r\n                placeholder=\"End Date\"\r\n                onChange={onChange} />\r\n        </span>\r\n        <span>\r\n            <input type=\"text\"\r\n                name=\"setCampaignName\"\r\n                value={campaignName}\r\n                placeholder=\"Search By Name\"\r\n                onChange={onChange} />\r\n            <button className=\"searchBtn\" onClick={onSearchBtnClick}><i className=\"fa fa-search\"></i></button>\r\n        </span>\r\n    </div>\r\n}\r\n\r\nSearchBar.propTypes = {\r\n    onFilterApply: PropTypes.func\r\n}\r\n\r\nexport default SearchBar;","export default {\r\n    DATE_FORMAT: \"MM/DD/YYYY\",\r\n    HTML_DATE_FIELD_FORMAT: \"YYYY-MM-DD\"\r\n};","import React from 'react';\r\nimport moment from 'moment';\r\nimport Util from '../Util';\r\nconst { DATE_FORMAT } = Util;\r\nconst getFormatedString = str =>// insert a space before all caps\r\n    str.replace(/([A-Z])/g, ' $1')\r\n        // uppercase the first character\r\n        .replace(/^./, function (str) { return str.toUpperCase(); });\r\n\r\nconst TableHeader = ({ columns }) => (\r\n    <thead>\r\n        <tr>\r\n            {columns.map((column, key) => <th key={key}>{getFormatedString(column)}</th>)}\r\n        </tr>\r\n    </thead>\r\n);\r\n\r\nconst dateValidityRenderer = function (row, value) {\r\n    let itemStartDate = moment(row.startDate, DATE_FORMAT);\r\n    let itemEndDate = moment(row.endDate, DATE_FORMAT);\r\n    if (itemStartDate > itemEndDate) {\r\n        return <span className=\"color-red\">{value}</span>;\r\n    }\r\n    return value;\r\n}\r\n\r\n// Rederers to be used so return some custom html on selected columns;\r\nconst renderers = {\r\n    isActive: function (row, value) {\r\n        let text = \"Active\";\r\n        if (!value) {\r\n            text = \"InActive\";\r\n\r\n        }\r\n        return <span><i className={`fa fa-circle ${text}`}></i> {text}</span>;\r\n    },\r\n    Budget: function (row, value) {\r\n        return `${value} USD`;\r\n    },\r\n    startDate: dateValidityRenderer,\r\n    endDate: dateValidityRenderer\r\n};\r\n\r\n// functional component to render a table for all the campaigns\r\nconst CampaignTable = ({ campaignTableData, onFilterApply }) => {\r\n    const columns = Object.keys(campaignTableData[0]);\r\n    return <table>\r\n        <TableHeader columns={columns} />\r\n        <tbody>\r\n            {\r\n                campaignTableData.map(campaign =>\r\n                    <tr key={campaign.id}>\r\n                        {columns.map((field, key) =>\r\n                            <td key={key}>\r\n                                {(renderers[field] && renderers[field](campaign, campaign[field])) || campaign[field]}\r\n                            </td>)}\r\n                    </tr>\r\n                )\r\n            }\r\n        </tbody>\r\n    </table>\r\n};\r\n\r\nexport default CampaignTable;\r\n","import React from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport moment from 'moment';\nimport CampaignTable from './components/CampaignTable';\nimport _ from 'lodash';\nimport Util from './Util';\n\nconst { DATE_FORMAT, HTML_DATE_FIELD_FORMAT } = Util;\n\n\n// function to check if the campaign is still active \n// or not according to the given logic.\nfunction isActive(campaign) {\n  const currentDate = moment();\n\n  const startDate = moment(campaign.startDate, DATE_FORMAT);\n  const endDate = moment(campaign.endDate, DATE_FORMAT);\n\n  if (currentDate.isBetween(startDate, endDate)) {\n    return true\n  }\n  return false;\n};\n\nconst campaignData = [\n  { id: 1, name: \"Divavu\", startDate: \"9/19/2017\", endDate: \"3/9/2018\", Budget: 88377 },\n  { id: 2, name: \"Jaxspan\", startDate: \"11/21/2017\", endDate: \"2/21/2018\", Budget: 608715 },\n  { id: 3, name: \"Miboo\", startDate: \"11/1/2017\", endDate: \"6/20/2017\", Budget: 239507 },\n  { id: 4, name: \"Trilith\", startDate: \"8/25/2017\", endDate: \"11/30/2017\", Budget: 179838 },\n  { id: 5, name: \"Layo\", startDate: \"11/28/2017\", endDate: \"10/22/2019\", Budget: 837850 },\n  { id: 6, name: \"Photojam\", startDate: \"7/25/2017\", endDate: \"6/23/2017\", Budget: 858131 },\n  { id: 7, name: \"Blogtag\", startDate: \"6/27/2017\", endDate: \"11/15/2019\", Budget: 109078 },\n  { id: 8, name: \"Rhyzio\", startDate: \"10/13/2017\", endDate: \"1/25/2018\", Budget: 272552 },\n  { id: 9, name: \"Zoomcast\", startDate: \"9/6/2017\", endDate: \"11/10/2017\", Budget: 301919 },\n  { id: 10, name: \"Realbridge\", startDate: \"3/5/2018\", endDate: \"10/2/2017\", Budget: 505602 }\n];\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      campaignTableData: []\n    }\n\n    window.AddCampaigns = (newData) => {\n      let data = [...this.state.campaignTableData];\n      data = data.concat(newData);\n\n      let valueArr = data.map(item => item.id);\n      let uniqueValue = [...new Set(valueArr)];\n\n      let hasDuplicates = valueArr > uniqueValue;\n      if (hasDuplicates) {\n        console.log(\"Please check the data provided it must have unique id values\");\n        return;\n      }\n      this.setState({ campaignTableData: data });\n    }\n  }\n\n\n  onFilterApply = ({ startDate, endDate, campaignName }) => {\n\n    let filteredData = [...campaignData];\n\n    // show record if startDate is in filter range\n    if (!_.isEmpty(startDate)) {\n      filteredData = filteredData.filter(item => {\n        let itemStartDate = moment(item.startDate, DATE_FORMAT);\n        let itemEndDate = moment(item.endDate, DATE_FORMAT);\n        let filterStartDate = moment(startDate, HTML_DATE_FIELD_FORMAT);\n        if (filterStartDate.isBetween(itemStartDate, itemEndDate)) {\n          return true\n        }\n        return false;\n      });\n    }\n\n    // show record if endDate is in filter range\n    if (!_.isEmpty(endDate)) {\n      let extraFilterRecords = filteredData.filter(item => {\n        let itemStartDate = moment(item.startDate, DATE_FORMAT);\n        let itemEndDate = moment(item.endDate, DATE_FORMAT);\n        let filterEndDate = moment(endDate, HTML_DATE_FIELD_FORMAT);\n        if (filterEndDate.isBetween(itemStartDate, itemEndDate)) {\n          return true\n        }\n        return false;\n      });\n\n      // merge data from startDate filter and endDate filter and removing duplicates\n      filteredData.concat(extraFilterRecords);\n      filteredData = _.uniqBy(filteredData, \"id\");\n    }\n\n    if (!_.isEmpty(campaignName)) {\n      filteredData = filteredData.filter(item =>\n        item.name.toLocaleLowerCase()\n          .indexOf(campaignName.toLocaleLowerCase()) > -1\n      )\n    }\n\n    this.setState({ campaignTableData: filteredData });\n  };\n\n  render() {\n    let { campaignTableData } = this.state;\n    const hasData = campaignTableData.length > 0;\n\n    if (hasData) {\n      campaignTableData = campaignTableData.map(campaign => {\n        campaign.isActive = isActive(campaign);\n        return campaign;\n      });\n    }\n\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          <h1>Campaign App</h1>\n          <SearchBar onFilterApply={this.onFilterApply} />\n        </header>\n        <section className=\"container\">\n\n          {hasData && <CampaignTable campaignTableData={campaignTableData} />}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}